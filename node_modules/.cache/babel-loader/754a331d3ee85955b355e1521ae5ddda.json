{"ast":null,"code":"var _jsxFileName = \"D:\\\\Coding\\\\GitHub\\\\zone\\\\zone\\\\src\\\\techtree\\\\panels\\\\treeParent.js\";\nimport React, { Component } from \"react\";\nimport TreePanel from \"./treePanel\";\nimport { TOWNCENTRE, RANGE, BARRACKS, STABLE, SIEGE, CASTLE, BLACSKMITH, MONASTERY, UNIVERSITY, ECONOMY, DOCK, DEFENSE } from \"./UNIT_NAMES\";\nimport CivContext from \"../CivContext\";\nconst NA = \"NA\";\nexport default class TreeParent extends Component {\n  constructor(props) {\n    super(props);\n    this.xRange = [[NA], [\"Archer\", \"Skirmisher\"], [\"Crossbowman\", \"Elite Skirmisher\", \"Cavalry Archer\", NA, NA, \"Thumb Ring\"], [\"Arbalester\", NA, \"Heavy Cavalry Archer\", \"Hand Cannoneer\", NA, \"Parthian Tactics\"], [NA]];\n    this.updateTree = this.updateTree.bind(this);\n  }\n  /* value = civ selected */\n\n\n  updateTree(value) {\n    this.xRange = [[NA], [\"Archer\", \"Skirmisher\"], [\"Crossbowman\", \"Elite Skirmisher\", \"Cavalry Archer\", NA, NA, \"Thumb Ring\"], [\"Arbalester\", NA, \"Heavy Cavalry Archer\", \"Hand Cannoneer\", NA, \"Parthian Tactics\"], [NA]];\n    console.log(this.xRange);\n\n    switch (value) {\n      case \"Aztecs\":\n        this.disable(this.xRange, [\"Cavalry Archer\", \"Hand Cannoneer\", \"Thumb Ring\", \"Parthian Tactics\", \"Heavy Cavalry Archer\"]);\n        break;\n\n      case \"Turks\":\n        this.disable(this.xRange, [\"Arbalester\", \"Elite Skirmisher\"]);\n        break;\n    } // if (value === \"Aztecs\" ) {\n    // this.disable(RANGE, [\"Cavalry Archer\", \"Heavy Cav Archer\", \"Hand Cannoneer\", \"Thumb Ring\", \"Parthian Tactics\", \"Heavy Cavalry Archer\"]);\n    // }\n    // [\"Cavalry Archer\", \"Heavy Cav Archer\", \"Hand Cannoneer\", \"Thumb Ring\", \"Parthian Tactics\"]\n\n  }\n\n  disable(build, units) {\n    console.log(build);\n    let newTree = Array.from(build);\n    let disableLength = units.length;\n\n    for (let i = 0; disableLength > 0 && i <= 4; i++) {\n      newTree[i].forEach(unit => {\n        units.forEach(x => {\n          if (unit === x) {\n            let k = newTree[i].indexOf(unit);\n            newTree[i][k] = NA;\n            disableLength--;\n          }\n        });\n      });\n    }\n\n    console.log(newTree);\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(CivContext.Consumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, value => this.updateTree(value)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \" HEADING \"), React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(TreePanel, {\n      build: \"Archery Range\",\n      tree: undefined,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }))))));\n  }\n\n}","map":{"version":3,"sources":["D:/Coding/GitHub/zone/zone/src/techtree/panels/treeParent.js"],"names":["React","Component","TreePanel","TOWNCENTRE","RANGE","BARRACKS","STABLE","SIEGE","CASTLE","BLACSKMITH","MONASTERY","UNIVERSITY","ECONOMY","DOCK","DEFENSE","CivContext","NA","TreeParent","constructor","props","xRange","updateTree","bind","value","console","log","disable","build","units","newTree","Array","from","disableLength","length","i","forEach","unit","x","k","indexOf","render","undefined"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\nimport TreePanel from \"./treePanel\";\r\nimport {TOWNCENTRE, RANGE, BARRACKS, STABLE, SIEGE, CASTLE, BLACSKMITH, MONASTERY, UNIVERSITY, ECONOMY, DOCK, DEFENSE} from \"./UNIT_NAMES\";\r\nimport CivContext from \"../CivContext\";\r\nconst NA = \"NA\";\r\n\r\nexport default class TreeParent extends Component {\r\n    xRange = [[NA], [\"Archer\", \"Skirmisher\"], [\"Crossbowman\", \"Elite Skirmisher\", \"Cavalry Archer\", NA, NA, \"Thumb Ring\"], [\"Arbalester\", NA, \"Heavy Cavalry Archer\", \"Hand Cannoneer\", NA, \"Parthian Tactics\"], [NA]];\r\n\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.updateTree = this.updateTree.bind(this);\r\n    }\r\n\r\n    /* value = civ selected */\r\n    updateTree(value) {\r\n    this.xRange = [[NA], [\"Archer\", \"Skirmisher\"], [\"Crossbowman\", \"Elite Skirmisher\", \"Cavalry Archer\", NA, NA, \"Thumb Ring\"], [\"Arbalester\", NA, \"Heavy Cavalry Archer\", \"Hand Cannoneer\", NA, \"Parthian Tactics\"], [NA]];\r\n\r\n    console.log(this.xRange);\r\n        switch (value) {\r\n            case \"Aztecs\":\r\n                this.disable(this.xRange, [\"Cavalry Archer\", \"Hand Cannoneer\", \"Thumb Ring\", \"Parthian Tactics\", \"Heavy Cavalry Archer\"]);\r\n                break;\r\n            case \"Turks\":\r\n                this.disable(this.xRange, [\"Arbalester\", \"Elite Skirmisher\"]);\r\n                break;\r\n        }\r\n        // if (value === \"Aztecs\" ) {\r\n        // this.disable(RANGE, [\"Cavalry Archer\", \"Heavy Cav Archer\", \"Hand Cannoneer\", \"Thumb Ring\", \"Parthian Tactics\", \"Heavy Cavalry Archer\"]);\r\n        // }\r\n        // [\"Cavalry Archer\", \"Heavy Cav Archer\", \"Hand Cannoneer\", \"Thumb Ring\", \"Parthian Tactics\"]\r\n    }\r\n\r\n    disable(build, units) {\r\n        console.log(build);\r\n        let newTree = Array.from(build);\r\n        let disableLength = units.length;\r\n\r\n        for (let i=0; disableLength>0 && i<=4; i++) {\r\n            newTree[i].forEach(unit => {\r\n                units.forEach(x => {\r\n                    if (unit === x) {\r\n                        let k = newTree[i].indexOf(unit);\r\n                        newTree[i][k] = NA;\r\n                        disableLength--;\r\n                    } \r\n                });\r\n            });\r\n        }\r\n\r\n        console.log(newTree);\r\n    }\r\n\r\n    render() {\r\n        \r\n        return(\r\n            <>\r\n            <CivContext.Consumer> \r\n                {value => this.updateTree(value)}\r\n            </CivContext.Consumer> \r\n            <div>\r\n                <h5> HEADING </h5>\r\n                <table>\r\n                    <tbody>\r\n                        <tr>\r\n                        <TreePanel build=\"Archery Range\" tree={undefined}/></tr>\r\n                        {/* <TreePanel build=\"Barracks\" tree={barracks}/>\r\n                        <TreePanel build=\"Stable\" tree={stable}/>\r\n                        \r\n                        </tr>\r\n                        <tr>\r\n                        <TreePanel build=\"Siege Workshop\" tree={siege}/>\r\n                        <TreePanel build=\"Castle\" tree={castle}/>\r\n                        <TreePanel build=\"Defense\" tree={defense}/>\r\n                        </tr>\r\n                        <tr>\r\n                        <TreePanel build=\"Blacksmith\" tree={blacksmith}/>\r\n                        <TreePanel build=\"University\" tree={university}/>\r\n                        <TreePanel build=\"Monastery\" tree={monastery}/>\r\n                        </tr>\r\n                        <tr>\r\n                        <TreePanel build=\"Town Center\" tree={townCentre}/>\r\n                        <TreePanel build=\"Economic Buildings\" tree={economy}/>\r\n                        <TreePanel build=\"Dock\" tree={dock}/>\r\n                        </tr> */}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            </>\r\n                    \r\n            \r\n        )\r\n        \r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}